os: linux
# use most recent available distro to support installation of crypsetup 2.2.0
# or above with as little fuss as possible.
dist: bionic

addons:
    apt:
        packages:
          - libdbus-1-dev
          - libudev-dev
          - libdbus-glib-1-dev

language: rust

# Use a package which supplies cryptsetup 2.3.0 which is required
# by features added in libcryptsetup-rs that are used in stratisd.
before_install:
  - sudo apt-get -q update
  # cryptsetup-bin conflicts with custom built cryptsetup
  - sudo apt-get remove cryptsetup-bin
  - sudo apt-get install -y libargon2-0 libjson-c3
  - wget "https://github.com/jbaublitz/stratisd/raw/deb/cryptsetup_2.3.0-1_amd64.deb"
  - sudo dpkg -i ./cryptsetup_2.3.0-1_amd64.deb
  # Linking fails if libcryptsetup 2.2 is present - must force
  # remove due to system dependencies
  - sudo dpkg --purge --force-all libcryptsetup12

matrix:
    fast_finish: true
    allow_failures:
        # Allow audit task to fail
        - env: TASK=audit
    include:

        # MANDATORY CHECKS USING CURRENT DEVELOPMENT COMPILER
        - name: "format Rust source using current development toolchain"
          rust: 1.41.0
          before_script:
              - rustup component add rustfmt
          env: TASK=fmt-travis
        - name: "lint Rust source using current development toolchain"
          rust: 1.41.0
          before_script:
              - rustup component add clippy
          env: TASK=clippy

        # MANDATORY TESTING USING LOWEST SUPPORTED COMPILER
        - name: "run Rust unit tests on lowest supported toolchain"
          rust: 1.41.0
          env: TASK=test
        - name: "build release on lowest supported toolchain"
          rust: 1.41.0
          env: TASK=release


        # MANDATORY TESTING ON STABLE
        - name: "build using stable toolchain"
          rust: stable
          env: TASK=build
        - name: "build without defaults using stable toolchain"
          rust: stable
          env: TASK=build-no-default
        - name: "build Rust docs using stable toolchain"
          rust: stable
          env: TASK=docs-travis
        - name: "run Rust unit tests using stable toolchain"
          rust: stable
          env: TASK=test
        - name: "run Rust destructive unit tests using stable toolchain"
          rust: stable
          sudo: required
          script: sudo PATH=${TRAVIS_HOME}/.cargo/bin:$PATH make -f Makefile test-travis
        - name: "build release using stable toolchain"
          rust: stable
          env: TASK=release


        # MANDATORY PYTHON CHECKS ON RECOMMENDED DEVELOPMENT INTERPRETER
        - name: "lint Python test code on recommended development interpreter"
          language: python
          python: "3.7.6"
          install: pip install pylint==2.3.1 dbus-client-gen==0.4 dbus-python-client-gen==0.7 psutil==5.4.3 pyudev==0.22.0
          before_script:
              - cd tests/client-dbus
          script: PYTHONPATH=./src make -f Makefile lint
        - name: "format Python test code on recommended development interpreter"
          language: python
          python: "3.7.6"
          install: pip install black==19.3b0 isort==4.3.4
          before_script:
              - cd tests/client-dbus
          env: TASK=fmt-travis


        # INTERMITTENTLY ALLOWED FAILURES
        # Allowed if a failure occurs after a new Rust release until the
        # failure is addressed.
        - name: "lint Rust source using beta toolchain"
          rust: beta
          before_script:
              - rustup component add clippy
          env: TASK=clippy


        # ALLOWED FAILURES
        # Run audit on Rust stable.  Make it an allowed failure, because:
        # * It takes 9 minutes, the longest of any task.
        # * It should be an advisory, and should not gate our development.
        - name: "run Rust audit task using stable toolchain"
          rust: stable
          env: TASK=audit

branches:
    only:
      - master
      - develop-2.0.1

script: make -f Makefile $TASK
