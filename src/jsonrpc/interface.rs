// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// These allows are needed for the autogenerated code in rpc_api!{}
#![allow(unused_variables, clippy::type_repetition_in_bounds)]

use std::path::PathBuf;

use jsonrpsee::rpc_api;
use serde_json::Value;

use crate::engine::{KeyDescription, PoolUuid};

pub type PoolListType = (Vec<String>, Vec<(u64, Option<u64>)>, Vec<(bool, bool)>);
pub type UdevType = (Option<(String, String)>, u16, String);

rpc_api! {
    pub Stratis {
        #[rpc(method = "SetKey")]
        fn key_set(
            key_desc: KeyDescription,
            interactive: Option<bool>,
        ) -> (Option<bool>, u16, String);

        #[rpc(method = "UnsetKey")]
        fn key_unset(
            key_desc: KeyDescription,
        ) -> (bool, u16, String);

        #[rpc(method = "ListKeys")]
        fn key_list() -> (Vec<KeyDescription>, u16, String);

        #[rpc(method = "CreatePool")]
        fn pool_create(
            name: String,
            blockdev_paths: Vec<PathBuf>,
            key_desc: Option<KeyDescription>,
        ) -> (bool, u16, String);

        #[rpc(method = "RenamePool")]
        fn pool_rename(
            name: String,
            new_name: String,
        ) -> (bool, u16, String);

        #[rpc(method = "AddDataDevs")]
        fn pool_add_data(
            name: String,
            blockdev_paths: Vec<PathBuf>,
        ) -> (bool, u16, String);

        #[rpc(method = "InitCache")]
        fn pool_init_cache(
            name: String,
            blockdev_paths: Vec<PathBuf>,
        ) -> (bool, u16, String);

        #[rpc(method = "AddCacheDevs")]
        fn pool_add_cache(
            name: String,
            blockdev_paths: Vec<PathBuf>,
        ) -> (bool, u16, String);

        #[rpc(method = "DestroyPool")]
        fn pool_destroy(name: String) -> (bool, u16, String);

        #[rpc(method = "UnlockPool")]
        fn pool_unlock(
            pool_uuid: PoolUuid,
            prompt: Option<bool>,
        ) -> (bool, u16, String);

        #[rpc(method = "PoolIsEncrypted")]
        fn pool_is_encrypted(pool_uuid: PoolUuid) -> (bool, u16, String);

        #[rpc(method = "ListPools")]
        fn pool_list() -> PoolListType;

        #[rpc(method = "Report")]
        fn report() -> Value;

        #[rpc(method = "Udev")]
        fn udev(dm_name: String) -> UdevType;
    }
}
